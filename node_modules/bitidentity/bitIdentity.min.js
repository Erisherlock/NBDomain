!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).BitID=e()}(this,(function(){"use strict";var t,e,i=i||new Function("try {return this===window;}catch(e){ return false;}"),o=i();const r="14kxqYv3emHGwf8m6YgSYLQkGCvn9Qrgr9",n=" ".repeat(150);var s="";let a=console.log;class c{static littleEndian(t){t.length%2!=0&&(t="0"+t);let e="";for(let i=t.length-2;i>=0;i-=2){let o=t.substr(i,2);a(o),e+=o}return e}static loadScript(t,e){var i=document.createElement("script");i.type="text/javascript",i.readyState?i.onreadystatechange=function(){"loaded"!=i.readyState&&"complete"!=i.readyState||(i.onreadystatechange=null,e&&e())}:i.onload=function(){e&&e()},i.src=t,document.getElementsByTagName("head")[0].appendChild(i)}static config(t){0==t.debug&&(a=t=>{}),s=t.filepayKey}static gentx(i){return new Promise((o,c)=>{i.pay.to.forEach(t=>{if(t.protocol&&"bitidentity"==t.protocol.toLowerCase()){const i=e.PrivateKey.fromWIF(t.value.privateKey),o=e.PublicKey.fromPrivateKey(i);t.data=[r,o.toString(),n],t.pvalue=t.value,t.value=0}}),a(i.pay.to),i.api_key=s,t.build(i,(r,n)=>{if(n){a("rawtx1=",n.toString());let r=this.genData2sign(n);a("data2sign="+r);var s=e.crypto.Hash.sha256(e.deps.Buffer.from(r));a("hash="+s.toString("hex")),i.pay.to.forEach(t=>{if(t.protocol&&"bitidentity"==t.protocol.toLowerCase()){const i=e.PrivateKey.fromWIF(t.pvalue.privateKey);const o=e.crypto.ECDSA.sign(s,i).toString();t.data[2]=o.concat(" ".repeat(150-o.length)),a("signature="+o),delete t.protocol,delete t.pvalue}}),a(i.pay.to),t.build(i,(t,e)=>{e?(a("data2sign111="+this.genData2sign(e)),a("rawtx="+e.toString()),o(e.toString())):c(t)})}else c(r)})})}static verifyID(t){const i=e.Transaction(t),o=this.genData2sign(i),r=this.getBitID(i);a(r);var n=e.crypto.Hash.sha256(e.deps.Buffer.from(o));if(r.length>0){for(var s=0;s<r.length;s++){const t=r[s];if(!e.crypto.ECDSA.verify(n,t.sig,t.publicKey))return!1}return!0}return!1}static getBitID(t){"string"==typeof t&&(t=e.Transaction(t));let i=[],o=0;return t.outputs.forEach(t=>{const n=new e.Script.fromBuffer(t._scriptBuffer);n.chunks.length;if(106==n.chunks[1].opcodenum&&n.chunks[2].buf.toString()==r){const t=e.PublicKey.fromString(n.chunks[3].buf.toString()),r=e.crypto.Signature.fromString(n.chunks[4].buf.toString());i.push({publicKey:t,sig:r,pos:o})}o++}),i}static genData2sign(t){let i="";return t.inputs.forEach(t=>{i+=t.prevTxId.toString("hex")+t.outputIndex}),t.outputs.forEach(t=>{const o=new e.Script.fromBuffer(t._scriptBuffer);o.chunks.length;106==o.chunks[1].opcodenum&&o.chunks[2].buf.toString()==r?(a("found bitID. PublicKey="+o.chunks[3].buf.toString()),i+=o.chunks[3].buf.toString()+t._satoshis):i+=o.toHex()+t._satoshis}),a("data2sign="+i),i}static genScriptFromBitbus(t){let i="";for(var o=0;o<t.len;o++)if(t["s"+o]){let r=0;const n=e.deps.Buffer.from(t["b"+o],"base64").length;if(n>=0&&n<e.Opcode.OP_PUSHDATA1)r=0;else if(n<Math.pow(2,8))r=e.Opcode.OP_PUSHDATA1;else if(n<Math.pow(2,16))r=e.Opcode.OP_PUSHDATA2;else{if(!(n<Math.pow(2,32)))throw new Error("You can't push that much data");r=e.Opcode.OP_PUSHDATA4}r&&(r=r.toString(16),i+=r);let s=n.toString(16);s=this.littleEndian(s),i+=s+t["h"+o]}else if(t["o"+o]){let r=e.Opcode.fromString(t["o"+o]).toHex();r.length<2&&(r="0"+r),i+=r}return i}static genData2signFromBitbus(t){let e="";return t.in.forEach(t=>{e+=t.e.h+t.e.i}),t.out.forEach(t=>{t.o1&&"OP_RETURN"==t.o1&&t.s2&&t.s2==r?(a("found bitID. PublicKey="+t.s3),e+=t.s3+t.e.v):e+=this.genScriptFromBitbus(t)+t.e.v}),a("bitbus data2sign="+e),e}static getBitIDFromBitbus(e){let i=[],o=0;return e.out.forEach(e=>{if("OP_RETURN"==e.o1&&e.s2==r){const r=t.bsv.PublicKey.fromString(e.s3),n=t.bsv.crypto.Signature.fromString(e.s4);i.push({publicKey:r,sig:n,pos:o})}o++}),i}static verifyIDFromBitbus(o){const r=this.genData2signFromBitbus(o),n=this.getBitIDFromBitbus(o);a(n);let s=null;if(s=(i(),t.bsv.crypto.Hash.sha256(e.deps.Buffer.from(r))),n&&n.length>0){for(let e=0;e<n.length;e++){let i=n[e];if(!t.bsv.crypto.ECDSA.verify(s,i.sig,i.publicKey))return!1}return!0}return!1}}return o?window.filepay?(t=window.filepay,e=t.bsv):c.loadScript("https://unpkg.com/filepay@latest/dist/filepay.min.js",()=>{t=window.filepay,e=t.bsv}):t||(t=require("filepay"),e=t.bsv),o||(module.exports=c),c}));
